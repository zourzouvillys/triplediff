
plugins {
  id "java-library"
  id "com.google.protobuf" version "0.8.6"
  id "maven"
  id "eclipse"
}

description = 'Triple Diff Streams'
version = 'master-SNAPSHOT'
group = 'com.github.zourzouvillys'

sourceCompatibility = 8
targetCompatibility = 8


repositories {
  mavenCentral()
  jcenter()
}

def protobufVersion = '3.6.1'

  
dependencies {
  implementation      "com.google.protobuf:protobuf-java:${protobufVersion}"
  compileOnly         'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.150'
  testImplementation  'junit:junit:4.12'
  testImplementation  'org.assertj:assertj-core:3.6.1'
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protobufVersion}"
  }
}


jar {
  manifest {
    attributes ('Automatic-Module-Name': "zrz.triples.diff")
  }
}      


sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDirs 'src/main/java'     
            srcDirs "build/generated/source/proto/main/java"       
        }
    }
}



// --------------------------------------------------
// install
// --------------------------------------------------


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}
    
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

javadoc {
  options.addBooleanOption('html5', true)
}  

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

javadoc {
  title = "TripleDiff"
  failOnError = false
}

install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }
}

////

eclipse {
  project.natures 'org.eclipse.buildship.core.gradleprojectnature'
  classpath {
    file {
      whenMerged {
        entries.findAll { isModule(it) }.each {  it.entryAttributes['module'] = 'true' }
        entries.findAll { isSource(it) && isTestScope(it) }.each { it.entryAttributes['test'] = 'true' }
        entries.findAll { isLibrary(it) && isTestScope(it) }.each { it.entryAttributes['test'] = 'true' }
      }
    }
  }
}

boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }
