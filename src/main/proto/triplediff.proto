syntax = "proto3";
 
package triplediff.v1;

option optimize_for = SPEED;
option java_package = "triplediff.protobuf";
option java_outer_classname = "TripleDiffProto";
option java_multiple_files = false;

message PrefixName {
  string prefix = 1;
  string localName = 2;
}

message Literal {
  // form depends on the data type.
  bytes lexical_form = 1;
  string data_type = 2;
}


message Any {
}

message Undefined {
}


message Term {
  oneof value {
    string blank_node = 1;
    string iri = 2;
    Literal literal = 3;
    PrefixName prefixed_name = 4;
    // the inlined literal native types.
    string stringLiteral = 8;
    int64 integerLiteral = 9;
    double doubleLiteral = 10;
    bool booleanLiteral = 11;
  }
}

/**
 * a term pattern
 */
 
message TermPattern {
  oneof value {
    Term term = 1;
    string variable = 2;
    Any any = 3;
    Undefined undefined = 4;
  }
}

/**
 * a single triple.
 */

message Triple {
  Term subject = 1;
  Term predicate = 2;
  Term object = 3;
}

message PrefixDecl {
  string prefix = 1;
  string iri = 2;
}

/** 
 *
 */
 
message Row {
  oneof value {
    // allows smaller streams when lots of IRIs included.
    PrefixDecl prefix = 1;
    Triple triple = 2;
    SubjectList subject_list = 3;
  }
}

message TupleList {
  Term predicate = 1;
  repeated Term objects = 2;
}

message SubjectList {
  Term subject = 1;
  repeated TupleList values = 2;
}

 
message Diff {
  oneof value {
    Row add = 1;
    Row delete = 2;
  }
}

message Delta {
  string id = 1;
  string parent = 2;
  repeated Diff diffs = 3;
}

/**
 * a triple path 
 */
 
message TriplePath {
  TermPattern subject = 1;
  TermPattern object = 2;
  oneof predicate {
    TermPattern predicatePattern = 3;
    Path predicatePath = 4;
    string predicateVariable = 5;
    Any predicateAny = 6;
  }
}

/**
 *
 */
 
message GraphPattern {
  repeated TriplePath triples = 1;
}

/**
 *
 */

message GraphOperation {
  oneof op {
    GraphPattern graphPattern = 1;
  }
}

/**
 * a list of path components
 */

message BinaryPath {
  Path left = 1;
  Path right = 2;
}

message PathLength {
  int32 value = 1;
}

/**
 * a single path component.
 */

message Path {
  
  oneof element {
  
    // a direct element.
    Term link = 1;
    
    // A or B
    BinaryPath alternate = 3;
    
    // A then B
    BinaryPath sequence = 4;
    
  }
  
  // min duplication of path length needed to match. 0 means it is optional. if not specified, defaults to exactly once.
  PathLength minRepeat = 100;
  
  // max duplication of path length. must be >= 1. default is 1.
  PathLength maxRepeat = 101;
  
  // swap the direction of the path.
  bool is_inverse = 102;
  
  // only patchs not matching this will match.
  bool is_negated = 103;
  
} 
 
 
